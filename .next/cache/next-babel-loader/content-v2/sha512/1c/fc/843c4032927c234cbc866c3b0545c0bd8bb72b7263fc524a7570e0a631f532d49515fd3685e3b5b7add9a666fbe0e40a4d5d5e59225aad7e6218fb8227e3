{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/iRoid/Desktop/learning react.js/next.js/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"C:/Users/iRoid/Desktop/learning react.js/next.js/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:/Users/iRoid/Desktop/learning react.js/next.js/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/iRoid/Desktop/learning react.js/next.js/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _asyncToGenerator = require(\"C:/Users/iRoid/Desktop/learning react.js/next.js/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _nodeHtmlParser = require(\"node-html-parser\");\n\nvar _constants = require(\"./constants\"); // const MIDDLEWARE_TIME_BUDGET = parseInt(process.env.__POST_PROCESS_MIDDLEWARE_TIME_BUDGET || '', 10) || 10\n\n\nvar MAXIMUM_IMAGE_PRELOADS = 2;\nvar IMAGE_PRELOAD_SIZE_THRESHOLD = 2500;\nvar middlewareRegistry = [];\n\nfunction registerPostProcessor(name, middleware, condition) {\n  middlewareRegistry.push({\n    name: name,\n    middleware: middleware,\n    condition: condition || null\n  });\n}\n\nfunction processHTML(_x, _x2, _x3) {\n  return _processHTML.apply(this, arguments);\n}\n\nfunction _processHTML() {\n  _processHTML = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(html, data, options) {\n    var postProcessData, root, document, callMiddleWare, _callMiddleWare, i, middleware;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _callMiddleWare = function _callMiddleWare3() {\n              _callMiddleWare = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(middleware) {\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        // let timer = Date.now()\n                        middleware.inspect(root, postProcessData, data);\n                        _context3.next = 3;\n                        return middleware.mutate(document, postProcessData, data);\n\n                      case 3:\n                        document = _context3.sent;\n                        return _context3.abrupt(\"return\");\n\n                      case 5:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n              return _callMiddleWare.apply(this, arguments);\n            };\n\n            callMiddleWare = function _callMiddleWare2(_x9) {\n              return _callMiddleWare.apply(this, arguments);\n            };\n\n            if (middlewareRegistry[0]) {\n              _context4.next = 4;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", html);\n\n          case 4:\n            postProcessData = {\n              preloads: {\n                images: []\n              }\n            };\n            root = (0, _nodeHtmlParser.parse)(html);\n            document = html; // Calls the middleware, with some instrumentation and logging\n\n            i = 0;\n\n          case 8:\n            if (!(i < middlewareRegistry.length)) {\n              _context4.next = 16;\n              break;\n            }\n\n            middleware = middlewareRegistry[i];\n\n            if (!(!middleware.condition || middleware.condition(options))) {\n              _context4.next = 13;\n              break;\n            }\n\n            _context4.next = 13;\n            return callMiddleWare(middlewareRegistry[i].middleware);\n\n          case 13:\n            i++;\n            _context4.next = 8;\n            break;\n\n          case 16:\n            return _context4.abrupt(\"return\", document);\n\n          case 17:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _processHTML.apply(this, arguments);\n}\n\nvar FontOptimizerMiddleware = /*#__PURE__*/function () {\n  function FontOptimizerMiddleware() {\n    var _this = this;\n\n    _classCallCheck(this, FontOptimizerMiddleware);\n\n    this.fontDefinitions = [];\n\n    this.mutate = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(markup, _data, options) {\n        var result, key, _this$fontDefinitions, url, nonce, fallBackLinkTag, fontContent, nonceStr;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                result = markup;\n\n                if (options.getFontDefinition) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", markup);\n\n              case 3:\n                _context.t0 = _regeneratorRuntime.keys(_this.fontDefinitions);\n\n              case 4:\n                if ((_context.t1 = _context.t0()).done) {\n                  _context.next = 14;\n                  break;\n                }\n\n                key = _context.t1.value;\n                _this$fontDefinitions = _slicedToArray(_this.fontDefinitions[key], 2), url = _this$fontDefinitions[0], nonce = _this$fontDefinitions[1];\n                fallBackLinkTag = \"<link rel=\\\"stylesheet\\\" href=\\\"\".concat(url, \"\\\"/>\");\n\n                if (!(result.indexOf(\"<style data-href=\\\"\".concat(url, \"\\\">\")) > -1 || result.indexOf(fallBackLinkTag) > -1)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 4);\n\n              case 10:\n                fontContent = options.getFontDefinition(url);\n\n                if (!fontContent) {\n                  /**\n                  * In case of unreachable font definitions, fallback to default link tag.\n                  */\n                  result = result.replace('</head>', \"\".concat(fallBackLinkTag, \"</head>\"));\n                } else {\n                  nonceStr = nonce ? \" nonce=\\\"\".concat(nonce, \"\\\"\") : '';\n                  result = result.replace('</head>', \"<style data-href=\\\"\".concat(url, \"\\\"\").concat(nonceStr, \">\").concat(fontContent, \"</style></head>\"));\n                }\n\n                _context.next = 4;\n                break;\n\n              case 14:\n                return _context.abrupt(\"return\", result);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x4, _x5, _x6) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  _createClass(FontOptimizerMiddleware, [{\n    key: \"inspect\",\n    value: function inspect(originalDom, _data, options) {\n      var _this2 = this;\n\n      if (!options.getFontDefinition) {\n        return;\n      } // collecting all the requested font definitions\n\n\n      originalDom.querySelectorAll('link').filter(function (tag) {\n        return tag.getAttribute('rel') === 'stylesheet' && tag.hasAttribute('data-href') && _constants.OPTIMIZED_FONT_PROVIDERS.some(function (url) {\n          var dataHref = tag.getAttribute('data-href');\n          return dataHref ? dataHref.startsWith(url) : false;\n        });\n      }).forEach(function (element) {\n        var url = element.getAttribute('data-href');\n        var nonce = element.getAttribute('nonce');\n\n        if (url) {\n          _this2.fontDefinitions.push([url, nonce]);\n        }\n      });\n    }\n  }]);\n\n  return FontOptimizerMiddleware;\n}();\n\nvar ImageOptimizerMiddleware = /*#__PURE__*/function () {\n  function ImageOptimizerMiddleware() {\n    _classCallCheck(this, ImageOptimizerMiddleware);\n\n    this.mutate = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(markup, _data) {\n        var result, imagePreloadTags;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                result = markup;\n                imagePreloadTags = _data.preloads.images.filter(function (imgHref) {\n                  return !preloadTagAlreadyExists(markup, imgHref);\n                }).reduce(function (acc, imgHref) {\n                  return acc + \"<link rel=\\\"preload\\\" href=\\\"\".concat(imgHref, \"\\\" as=\\\"image\\\"/>\");\n                }, '');\n                return _context2.abrupt(\"return\", result.replace(/<link rel=\"preload\"/, \"\".concat(imagePreloadTags, \"<link rel=\\\"preload\\\"\")));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x7, _x8) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  }\n\n  _createClass(ImageOptimizerMiddleware, [{\n    key: \"inspect\",\n    value: function inspect(originalDom, _data) {\n      var imgElements = originalDom.querySelectorAll('img');\n      var eligibleImages = [];\n\n      for (var i = 0; i < imgElements.length; i++) {\n        if (isImgEligible(imgElements[i])) {\n          eligibleImages.push(imgElements[i]);\n        }\n\n        if (eligibleImages.length >= MAXIMUM_IMAGE_PRELOADS) {\n          break;\n        }\n      }\n\n      _data.preloads.images = [];\n\n      for (var _i = 0, _eligibleImages = eligibleImages; _i < _eligibleImages.length; _i++) {\n        var imgEl = _eligibleImages[_i];\n        var src = imgEl.getAttribute('src');\n\n        if (src) {\n          _data.preloads.images.push(src);\n        }\n      }\n    }\n  }]);\n\n  return ImageOptimizerMiddleware;\n}();\n\nfunction isImgEligible(imgElement) {\n  var imgSrc = imgElement.getAttribute('src');\n  return !!imgSrc && sourceIsSupportedType(imgSrc) && imageIsNotTooSmall(imgElement) && imageIsNotHidden(imgElement);\n}\n\nfunction preloadTagAlreadyExists(html, href) {\n  var regex = new RegExp(\"<link[^>]*href[^>]*\".concat(href));\n  return html.match(regex);\n}\n\nfunction imageIsNotTooSmall(imgElement) {\n  // Skip images without both height and width--we don't know enough to say if\n  // they are too small\n  if (!(imgElement.hasAttribute('height') && imgElement.hasAttribute('width'))) {\n    return true;\n  }\n\n  try {\n    var heightAttr = imgElement.getAttribute('height');\n    var widthAttr = imgElement.getAttribute('width');\n\n    if (!heightAttr || !widthAttr) {\n      return true;\n    }\n\n    if (parseInt(heightAttr) * parseInt(widthAttr) <= IMAGE_PRELOAD_SIZE_THRESHOLD) {\n      return false;\n    }\n  } catch (err) {\n    return true;\n  }\n\n  return true;\n} // Traverse up the dom from each image to see if it or any of it's\n// ancestors have the hidden attribute.\n\n\nfunction imageIsNotHidden(imgElement) {\n  var activeElement = imgElement;\n\n  while (activeElement.parentNode) {\n    if (activeElement.hasAttribute('hidden')) {\n      return false;\n    }\n\n    activeElement = activeElement.parentNode;\n  }\n\n  return true;\n} // Currently only filters out svg images--could be made more specific in the future.\n\n\nfunction sourceIsSupportedType(imgSrc) {\n  return !imgSrc.includes('.svg');\n} // Initialization\n\n\nregisterPostProcessor('Inline-Fonts', new FontOptimizerMiddleware(), // Using process.env because passing Experimental flag through loader is not possible.\n// @ts-ignore\nfunction (options) {\n  return options.optimizeFonts || process.env.__NEXT_OPTIMIZE_FONTS;\n});\nregisterPostProcessor('Preload Images', new ImageOptimizerMiddleware(), // @ts-ignore\nfunction (options) {\n  return options.optimizeImages || process.env.__NEXT_OPTIMIZE_IMAGES;\n});\nvar _default = processHTML;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../next-server/lib/post-process.ts"],"names":["MAXIMUM_IMAGE_PRELOADS","IMAGE_PRELOAD_SIZE_THRESHOLD","middlewareRegistry","name","middleware","condition","postProcessData","preloads","images","root","document","i","callMiddleWare","FontOptimizerMiddleware","inspect","options","originalDom","tag","OPTIMIZED_FONT_PROVIDERS","url","dataHref","element","nonce","result","fallBackLinkTag","fontContent","nonceStr","ImageOptimizerMiddleware","imgElements","eligibleImages","isImgEligible","_data","imgEl","src","imagePreloadTags","imgHref","preloadTagAlreadyExists","acc","imgSrc","imgElement","sourceIsSupportedType","imageIsNotTooSmall","imageIsNotHidden","regex","html","heightAttr","widthAttr","parseInt","activeElement","registerPostProcessor","process","processHTML"],"mappings":"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","sourcesContent":["import { parse, HTMLElement } from 'node-html-parser'\nimport { OPTIMIZED_FONT_PROVIDERS } from './constants'\n\n// const MIDDLEWARE_TIME_BUDGET = parseInt(process.env.__POST_PROCESS_MIDDLEWARE_TIME_BUDGET || '', 10) || 10\nconst MAXIMUM_IMAGE_PRELOADS = 2\nconst IMAGE_PRELOAD_SIZE_THRESHOLD = 2500\n\ntype postProcessOptions = {\n  optimizeFonts: boolean\n  optimizeImages: boolean\n}\n\ntype renderOptions = {\n  getFontDefinition?: (url: string) => string\n}\n\ntype postProcessData = {\n  preloads: {\n    images: Array<string>\n  }\n}\n\ninterface PostProcessMiddleware {\n  inspect: (\n    originalDom: HTMLElement,\n    data: postProcessData,\n    options: renderOptions\n  ) => void\n  mutate: (\n    markup: string,\n    data: postProcessData,\n    options: renderOptions\n  ) => Promise<string>\n}\n\ntype middlewareSignature = {\n  name: string\n  middleware: PostProcessMiddleware\n  condition: ((options: postProcessOptions) => boolean) | null\n}\n\nconst middlewareRegistry: Array<middlewareSignature> = []\n\nfunction registerPostProcessor(\n  name: string,\n  middleware: PostProcessMiddleware,\n  condition?: (options: postProcessOptions) => boolean\n) {\n  middlewareRegistry.push({ name, middleware, condition: condition || null })\n}\n\nasync function processHTML(\n  html: string,\n  data: renderOptions,\n  options: postProcessOptions\n): Promise<string> {\n  // Don't parse unless there's at least one processor middleware\n  if (!middlewareRegistry[0]) {\n    return html\n  }\n  const postProcessData: postProcessData = {\n    preloads: {\n      images: [],\n    },\n  }\n  const root: HTMLElement = parse(html)\n  let document = html\n  // Calls the middleware, with some instrumentation and logging\n  async function callMiddleWare(middleware: PostProcessMiddleware) {\n    // let timer = Date.now()\n    middleware.inspect(root, postProcessData, data)\n    document = await middleware.mutate(document, postProcessData, data)\n    // timer = Date.now() - timer\n    // if (timer > MIDDLEWARE_TIME_BUDGET) {\n    // TODO: Identify a correct upper limit for the postprocess step\n    // and add a warning to disable the optimization\n    // }\n    return\n  }\n\n  for (let i = 0; i < middlewareRegistry.length; i++) {\n    let middleware = middlewareRegistry[i]\n    if (!middleware.condition || middleware.condition(options)) {\n      await callMiddleWare(middlewareRegistry[i].middleware)\n    }\n  }\n\n  return document\n}\n\nclass FontOptimizerMiddleware implements PostProcessMiddleware {\n  fontDefinitions: (string | undefined)[][] = []\n  inspect(\n    originalDom: HTMLElement,\n    _data: postProcessData,\n    options: renderOptions\n  ) {\n    if (!options.getFontDefinition) {\n      return\n    }\n    // collecting all the requested font definitions\n    originalDom\n      .querySelectorAll('link')\n      .filter(\n        (tag: HTMLElement) =>\n          tag.getAttribute('rel') === 'stylesheet' &&\n          tag.hasAttribute('data-href') &&\n          OPTIMIZED_FONT_PROVIDERS.some((url) => {\n            const dataHref = tag.getAttribute('data-href')\n            return dataHref ? dataHref.startsWith(url) : false\n          })\n      )\n      .forEach((element: HTMLElement) => {\n        const url = element.getAttribute('data-href')\n        const nonce = element.getAttribute('nonce')\n\n        if (url) {\n          this.fontDefinitions.push([url, nonce])\n        }\n      })\n  }\n  mutate = async (\n    markup: string,\n    _data: postProcessData,\n    options: renderOptions\n  ) => {\n    let result = markup\n    if (!options.getFontDefinition) {\n      return markup\n    }\n    for (const key in this.fontDefinitions) {\n      const [url, nonce] = this.fontDefinitions[key]\n      const fallBackLinkTag = `<link rel=\"stylesheet\" href=\"${url}\"/>`\n      if (\n        result.indexOf(`<style data-href=\"${url}\">`) > -1 ||\n        result.indexOf(fallBackLinkTag) > -1\n      ) {\n        // The font is already optimized and probably the response is cached\n        continue\n      }\n      const fontContent = options.getFontDefinition(url as string)\n      if (!fontContent) {\n        /**\n         * In case of unreachable font definitions, fallback to default link tag.\n         */\n        result = result.replace('</head>', `${fallBackLinkTag}</head>`)\n      } else {\n        const nonceStr = nonce ? ` nonce=\"${nonce}\"` : ''\n        result = result.replace(\n          '</head>',\n          `<style data-href=\"${url}\"${nonceStr}>${fontContent}</style></head>`\n        )\n      }\n    }\n    return result\n  }\n}\n\nclass ImageOptimizerMiddleware implements PostProcessMiddleware {\n  inspect(originalDom: HTMLElement, _data: postProcessData) {\n    const imgElements = originalDom.querySelectorAll('img')\n    let eligibleImages: Array<HTMLElement> = []\n    for (let i = 0; i < imgElements.length; i++) {\n      if (isImgEligible(imgElements[i])) {\n        eligibleImages.push(imgElements[i])\n      }\n      if (eligibleImages.length >= MAXIMUM_IMAGE_PRELOADS) {\n        break\n      }\n    }\n\n    _data.preloads.images = []\n\n    for (const imgEl of eligibleImages) {\n      const src = imgEl.getAttribute('src')\n      if (src) {\n        _data.preloads.images.push(src)\n      }\n    }\n  }\n  mutate = async (markup: string, _data: postProcessData) => {\n    let result = markup\n    let imagePreloadTags = _data.preloads.images\n      .filter((imgHref) => !preloadTagAlreadyExists(markup, imgHref))\n      .reduce(\n        (acc, imgHref) =>\n          acc + `<link rel=\"preload\" href=\"${imgHref}\" as=\"image\"/>`,\n        ''\n      )\n    return result.replace(\n      /<link rel=\"preload\"/,\n      `${imagePreloadTags}<link rel=\"preload\"`\n    )\n  }\n}\n\nfunction isImgEligible(imgElement: HTMLElement): boolean {\n  let imgSrc = imgElement.getAttribute('src')\n  return (\n    !!imgSrc &&\n    sourceIsSupportedType(imgSrc) &&\n    imageIsNotTooSmall(imgElement) &&\n    imageIsNotHidden(imgElement)\n  )\n}\n\nfunction preloadTagAlreadyExists(html: string, href: string) {\n  const regex = new RegExp(`<link[^>]*href[^>]*${href}`)\n  return html.match(regex)\n}\n\nfunction imageIsNotTooSmall(imgElement: HTMLElement): boolean {\n  // Skip images without both height and width--we don't know enough to say if\n  // they are too small\n  if (\n    !(imgElement.hasAttribute('height') && imgElement.hasAttribute('width'))\n  ) {\n    return true\n  }\n  try {\n    const heightAttr = imgElement.getAttribute('height')\n    const widthAttr = imgElement.getAttribute('width')\n    if (!heightAttr || !widthAttr) {\n      return true\n    }\n\n    if (\n      parseInt(heightAttr) * parseInt(widthAttr) <=\n      IMAGE_PRELOAD_SIZE_THRESHOLD\n    ) {\n      return false\n    }\n  } catch (err) {\n    return true\n  }\n  return true\n}\n\n// Traverse up the dom from each image to see if it or any of it's\n// ancestors have the hidden attribute.\nfunction imageIsNotHidden(imgElement: HTMLElement): boolean {\n  let activeElement = imgElement\n  while (activeElement.parentNode) {\n    if (activeElement.hasAttribute('hidden')) {\n      return false\n    }\n    activeElement = activeElement.parentNode as HTMLElement\n  }\n  return true\n}\n\n// Currently only filters out svg images--could be made more specific in the future.\nfunction sourceIsSupportedType(imgSrc: string): boolean {\n  return !imgSrc.includes('.svg')\n}\n\n// Initialization\nregisterPostProcessor(\n  'Inline-Fonts',\n  new FontOptimizerMiddleware(),\n  // Using process.env because passing Experimental flag through loader is not possible.\n  // @ts-ignore\n  (options) => options.optimizeFonts || process.env.__NEXT_OPTIMIZE_FONTS\n)\n\nregisterPostProcessor(\n  'Preload Images',\n  new ImageOptimizerMiddleware(),\n  // @ts-ignore\n  (options) => options.optimizeImages || process.env.__NEXT_OPTIMIZE_IMAGES\n)\n\nexport default processHTML\n"]},"metadata":{},"sourceType":"script"}